{"version":3,"file":"static/js/554.6dc7e10e.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,uGACxBF,EAAAA,EAAAA,IAAU,qBAAsB,CACrCG,OAAQ,CACNC,QAASH,MAHkB,2CAAH,qDAQjBI,EAAc,mCAAG,WAAOC,GAAP,0FACrBN,EAAAA,EAAAA,IAAU,eAAgB,CAC/BG,OAAQ,CACNC,QAASH,EACTK,MAAAA,MAJwB,2CAAH,sDAUdC,EAAe,SAACC,GAC3B,OAAOR,EAAAA,EAAAA,IAAA,gBAAmBQ,GAAM,CAC9BL,OAAQ,CACNC,QAASH,IAGd,EAEYQ,EAAU,SAAAD,GACrB,OAAOR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,YAAiC,CACtCL,OAAQ,CACNC,QAASH,IAGd,EAEYS,EAAa,SAAAF,GACxB,OAAOR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,YAAiC,CACtCL,OAAQ,CACNC,QAASH,IAGd,C,mEC7CYU,EAAS,WACpB,OACE,gBAAKC,UAAU,oGAAf,UACE,iBAAKA,UAAU,gEAAf,WACE,eAAIA,UAAU,qBAAd,sBACA,gBACEC,KAAK,OACLD,UAAU,yBACVE,QAAQ,YACRC,MAAM,6BAJR,UAME,iBACEC,SAAS,UACTC,EAAE,kGACFJ,KAAK,eACLK,SAAS,kBAMpB,C,oFCnBYC,EAAY,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,MAAOZ,EAAS,EAATA,GACzBa,GAAWC,EAAAA,EAAAA,MAEnB,OACE,yBACE,SAAC,KAAD,CAAMC,MAAO,CAACC,KAAKH,GAAWI,GAAE,kBAAajB,GAA7C,SAAoDY,KAGzD,ECPYM,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC3B,OACE,wBACGA,EAAOC,KAAI,YAAoB,IAAjBpB,EAAgB,EAAhBA,GAAIY,EAAY,EAAZA,MACjB,OAAO,SAACD,EAAD,CAAoBC,MAAOA,EAAOZ,GAAIA,GAAtBA,EACxB,KAGN,C,wJCgBD,EAtBiB,WACX,MCHsB,SAACqB,GAAyB,IAAfC,EAAc,uDAAP,GAC5C,GAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,GAAKT,GAAaC,EAAKS,OAAvB,CACA,IAAMC,EAAS,mCAAG,oGAEdL,GAAa,GAFC,SAGQN,IAHR,OAGRY,EAHQ,OAIdR,EAAQQ,GAJM,gDAMdJ,GAAW,GANG,yBAQdF,GAAa,GARC,4EAAH,qDAWfK,GAZqC,CActC,GAAEV,GACI,CACLE,KAAAA,EACAI,QAAAA,EACAF,UAAAA,EAEH,CDnBSQ,CAAaxC,EAAAA,IAHTyB,EADR,EACEK,KACAI,EAFF,EAEEA,QACAF,EAHF,EAGEA,UAGJ,OAAIE,GACO,kCAGX,gCACE,2CACCF,GACC,SAACvB,EAAA,EAAD,IAEAgB,IAAU,SAACD,EAAA,EAAD,CAAYC,OAAQA,EAAOK,KAAKW,YAIjD,C","sources":["api/api.js","components/Loader/Loader.jsx","components/MovieCard/MovieItem.jsx","components/MoviesList/MoviesList.jsx","pages/HomePage/HomePage.jsx","utils/hooks/useFetchData.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'ab77f0c04f8ab9ce7b6392ae1e254264';\n\nexport const getTrendingMovies = async () => {\n  return axios.get('trending/movie/day', {\n    params: {\n      api_key: API_KEY, \n    },\n  });\n};\n\nexport const getMovieByName = async (query) => {\n  return axios.get('search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n      \n    },\n  });\n};\n\nexport const getMovieById = (id) => {\n  return axios.get(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n}\n\nexport const getCast = id => {\n  return axios.get(`movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const getReviews = id => {\n  return axios.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};","export const Loader = () => {\n  return (\n    <div className=\" fixed top-0 left-0 z-20 flex h-full w-full items-center justify-center bg-gray-900 bg-opacity-90\">\n      <div className=\"flex flex-col items-center justify-center gap-4 text-slate-50\">\n        <h2 className=\"text-4xl font-bold\">Loading</h2>\n        <svg\n          fill=\"none\"\n          className=\"h-14 w-14 animate-spin\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            clipRule=\"evenodd\"\n            d=\"M15.165 8.53a.5.5 0 01-.404.58A7 7 0 1023 16a.5.5 0 011 0 8 8 0 11-9.416-7.874.5.5 0 01.58.404z\"\n            fill=\"currentColor\"\n            fillRule=\"evenodd\"\n          />\n        </svg>\n      </div>\n    </div>\n  );\n};\n","import { Link, useLocation,  } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nexport const MovieCard = ({ title, id }) => {\n    const location = useLocation()\n    \n  return (\n    <li>\n      <Link state={{from:location}} to={`/movies/${id}`}>{title}</Link>\n    </li>\n  );\n};\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  id:PropTypes.number.isRequired\n};","import { MovieCard } from 'components/MovieCard/MovieItem';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ movies }) => {\n  return (\n    <ul>\n      {movies.map(({ id, title }) => {\n        return <MovieCard key={id} title={title} id={id} />;\n      })}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import { getTrendingMovies } from 'api/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useFetchData } from 'utils/hooks/useFetchData';\n\nconst HomePage = () => {\n      const {\n        data: movies,\n        isError,\n        isLoading,\n      } = useFetchData(getTrendingMovies);\n\n    if (isError) {\n        return <p>Error</p>\n    }\n  return (\n    <section>\n      <h1>Trending today</h1>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        movies && <MoviesList movies={movies.data.results} />\n      )}\n    </section>\n  );\n};\n\nexport default HomePage;\n","import { useState } from 'react';\nimport { useEffect } from 'react';\n\nexport const useFetchData = (callback, deps = []) => {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    if (!callback && !deps.length) return;\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const resData = await callback();\n        setData(resData);\n      } catch (error) {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return {\n    data,\n    isError,\n    isLoading,\n  };\n};\n"],"names":["axios","API_KEY","getTrendingMovies","params","api_key","getMovieByName","query","getMovieById","id","getCast","getReviews","Loader","className","fill","viewBox","xmlns","clipRule","d","fillRule","MovieCard","title","location","useLocation","state","from","to","MoviesList","movies","map","callback","deps","useState","data","setData","isLoading","setIsLoading","isError","setIsError","useEffect","length","fetchData","resData","useFetchData","results"],"sourceRoot":""}